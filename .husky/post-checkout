#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

LOG_PREFIX="[.husky/post-checkout]"

. "$(dirname "$0")/hook-utils.sh"

HEAD_PREV="$1"
HEAD_NEW="$2"
CKOUT_TYPE_FLAG="$3"      # 0 = retrieve file from index, 1 = changing branches
IS_CLONING=false

# check if this is a post-checkout after a `git clone`
if [ -z "$HEAD_PREV" ]; then
  IS_CLONING=true
fi

# Function to configure git repository to enforce GPG signed commits
config_git_commit_signing() {
  if [ "$IS_CLONING" = "true" ]; then
    log "Configuring Git: commit.gpgsign=true"
    if ! git config --local commit.gpgsign true; then
      error "ERROR: Failed to configure GPG signing for commits."
      error "Commits are required to be signed for this repository."
      exit 1
    elif ! git config --get user.signingkey 1>/dev/null 2>&1; then
      log "==============================================================="
      log "                   USER ACTION REQUIRED!"
      log "---------------------------------------------------------------"
      log "GPG commit signing is required for this repository! Please"
      log "configure your repository with the following command:"
      log "" # prefixed-newline
      log "    git config --local user.signingkey <GPG_KEY_ID>"
      log "" # prefixed-newline
      log "==============================================================="
    fi
    log "Signature exists: user.signingkey=$(git config --get user.signingkey)"
  fi
}

activate_nvm_env() {
  # Only run if changing branches & NVM is installed
  if ! [ "$CKOUT_TYPE_FLAG" = "1" ]; then
    return 0 # Abort action
  fi
  if ! command -v nvm >/dev/null 2>&1; then
    return 0 # Abort action
  fi
  output=""
  if ! output=$(nvm use); then
    if ! replay "$output" | grep --quiet "not yet installed"; then
      unset output
      return 0 # Abort action
    fi
    VERSION=""
    VERSION="$(replay "$output" | grep 'nvm install' | sed 's/.*install v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')"
    # enable user input, git by default runs in non-interactive mode
    if ! exec </dev/tty; then
      unset output VERSION
      return 0 # Abort
    fi
    response=""
    confirmed=false
    while [ "$confirmed" = "false" ]; do
      printf '%s' "Would you like to install Node.js ${VERSION} via nvm (Y/n)? "
      read -r response;
      if replay "$response" | grep -q -i -E '^\s*(Y|YES|YEP)\s*$'; then  
        response="install"
      elif replay "$response" | grep -q -i -E '^\s*(N|NO|NOPE)\s*$'; then
        response=""
      else
        replay >&2 "Invalid response received. Try again."
        continue
      fi
      confirmed=true;
    done
    if [ "$response" = "install" ]; then
      log "Installing Node.js v$VERSION via nvm..."
      if ! nvm install "$VERSION" --latest-npm; then
        error "ERROR: nvm's installer failed, see error above."
        error "Your node version does not match with the expected dev environment version."
        unset output VERSION response confirmed
        return 1
      fi
      log "node --version = $(node --version)"
    else
      error "NODE VERSION MIXMATCH: Expected dev environment Node.js version is not installed."
      error "Authors expect to contributors to use the Node.js version defined in .nvmrc for development."
      error "dev at your own risk!"
    fi
  fi
  unset output VERSION response confirmed
}

update_npm_dependencies() {
  # Only run if changing branches and not performing the initial `git clone`
  if [ "$CKOUT_TYPE_FLAG" = "1" ] && [ "$IS_CLONING" = "false" ]; then
    changed_files=""
    # derived from https://gist.github.com/taurus227/28960de89e6c43bb3d492125368f1224
    changed_files="$(git diff-tree -r --name-only --diff-filter=M --no-commit-id "$HEAD_PREV" "$HEAD_NEW")"

    if echo "$changed_files" | grep --quiet "package-lock.json"; then
      log "CHANGE DETECTED: 'package-lock.json'"
      log "Dependency requirements changed! This will take a few seconds..."

      if ! command -v npm 1>/dev/null 2>&1; then
        log "NPM not found on \$PATH, however 'npm install' is desired. Please accomplish manually."
        unset -v changed_files
        return 1
      fi

      if ! explicit_run_cmd "npm install --prefer-offline --no-fund --no-audit"; then
        error "ERROR: Dependency installation failed."
        error "You will need to perform an install manually to continue."
        unset -v changed_files
        return 1
      fi
    fi
    unset -v changed_files
  fi
}

config_git_commit_signing
activate_nvm_env
update_npm_dependencies

# [4] env cleanup (vars, functions, utils)
unset -v HEAD_PREV HEAD_NEW CKOUT_TYPE_FLAG IS_CLONING
unset -f config_git_commit_signing activate_nvm_env update_npm_dependencies
cleanup
